devtools::install_github("privefl/prettyjekyll")
install.packages("rmarkdown")
setwd("~/Data analysis/R scripts/breza.github.io/_Rmd")
setwd("~/Data analysis/R scripts/breza.github.io")
#' This R script will process all R mardown files (those with in_ext file extention,
#' .rmd by default) in the current working directory. Files with a status of
#' 'processed' will be converted to markdown (with out_ext file extention, '.markdown'
#' by default). It will change the published parameter to 'true' and change the
#' status parameter to 'publish'.
#'
#' @param path_site path to the local root storing the site files
#' @param dir_rmd directory containing R Markdown files (inputs)
#' @param dir_md directory containing markdown files (outputs)
#' @param url_images where to store/get images created from plots directory +"/" (relative to path_site)
#' @param out_ext the file extention to use for processed files.
#' @param in_ext the file extention of input files to process.
#' @param recursive should rmd files in subdirectories be processed.
#' @return nothing.
#' @author Jason Bryer <jason@bryer.org> edited by Andy South
rmd2md <- function( path_site = getwd(),
dir_rmd = "_rmd",
dir_md = "_posts",
#dir_images = "figures",
url_images = "figures/",
out_ext='.md',
in_ext='.rmd',
recursive=FALSE) {
require(knitr, quietly=TRUE, warn.conflicts=FALSE)
#andy change to avoid path problems when running without sh on windows
files <- list.files(path=file.path(path_site,dir_rmd), pattern=in_ext, ignore.case=TRUE, recursive=recursive)
for(f in files) {
message(paste("Processing ", f, sep=''))
content <- readLines(file.path(path_site,dir_rmd,f))
frontMatter <- which(substr(content, 1, 3) == '---')
if(length(frontMatter) >= 2 & 1 %in% frontMatter) {
statusLine <- which(substr(content, 1, 7) == 'status:')
publishedLine <- which(substr(content, 1, 10) == 'published:')
if(statusLine > frontMatter[1] & statusLine < frontMatter[2]) {
status <- unlist(strsplit(content[statusLine], ':'))[2]
status <- sub('[[:space:]]+$', '', status)
status <- sub('^[[:space:]]+', '', status)
if(tolower(status) == 'process') {
#This is a bit of a hack but if a line has zero length (i.e. a
#black line), it will be removed in the resulting markdown file.
#This will ensure that all line returns are retained.
content[nchar(content) == 0] <- ' '
message(paste('Processing ', f, sep=''))
content[statusLine] <- 'status: publish'
content[publishedLine] <- 'published: true'
#andy change to path
outFile <- file.path(path_site, dir_md, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
#render_markdown(strict=TRUE)
#render_markdown(strict=FALSE) #code didn't render properly on blog
#andy change to render for jekyll
render_jekyll(highlight = "pygments")
#render_jekyll(highlight = "prettify") #for javascript
opts_knit$set(out.format='markdown')
# andy BEWARE don't set base.dir!! it caused me problems
# "base.dir is never used when composing the URL of the figures; it is
# only used to save the figures to a different directory.
# The URL of an image is always base.url + fig.path"
# https://groups.google.com/forum/#!topic/knitr/18aXpOmsumQ
opts_knit$set(base.url = "/")
opts_chunk$set(fig.path = url_images)
#andy I could try to make figures bigger
#but that might make not work so well on mobile
#opts_chunk$set(fig.width  = 8.5,
#               fig.height = 5.25)
try(knit(text=content, output=outFile), silent=FALSE)
} else {
warning(paste("Not processing ", f, ", status is '", status,
"'. Set status to 'process' to convert.", sep=''))
}
} else {
warning("Status not found in front matter.")
}
} else {
warning("No front matter found. Will not process this file.")
}
}
invisible()
}
rmd2md()
path_site = getwd()
dir_rmd = "_rmd"
dir_md = "_posts"
list.files(path=file.path(path_site,dir_rmd), pattern=in_ext, ignore.case=TRUE, recursive=recursive)
in_ext='.rmd'
list.files(path=file.path(path_site,dir_rmd), pattern=in_ext, ignore.case=TRUE, recursive=recursive)
list.files(path=file.path(path_site,dir_rmd), pattern=in_ext, ignore.case=TRUE, recursive=FALSE)
list.files(path=file.path(path_site,dir_rmd), ignore.case=TRUE, recursive=FALSE)
file.path(path_site,dir_rmd)
hist(rnorm(327000))
rmd2md()
getwd()
rmd2md
rmd2md()
rmd2md()
getwd()
rmd2md()
rmd2md()
rmd2md()
rmd2md()
rmd2md
hist(rnorm(327000))
hist(rnorm(327000, color = "red"))
hist(rnorm(327000, col = "red"))
hist(rnorm(327000), color = "red")
hist(rnorm(327000), col = "red")
hist(rnorm(327000), col = "red", main = "")
rmd2md()
rmd2md()
rmd2md()
ggplot(gender_balance, aes(x = year, y = percent)) +
geom_point(aes(color = gender) +
scale_x_discrete(breaks = seq(from = 1890, to = 2010, by = 10)) +
scale_y_continuous(labels=percent) +
theme_bw() +
scale_color_manual(values=c("red", "blue"))
ggplot(gender_balance, aes(x = year, y = percent)) +
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(scales)
library(stringr)
ggplot(gender_balance, aes(x = year, y = percent)) +
geom_point(aes(color = gender) +
scale_x_discrete(breaks = seq(from = 1890, to = 2010, by = 10)) +
scale_y_continuous(labels=percent) +
theme_bw() +
scale_color_manual(values=c("red", "blue"))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(stringr)
# Temporarily change working directory to a temp folder
# ...Don't worry, I'll change it back
old_wd <- getwd()
setwd(tempdir())
# Download and unzip dataset from data.gov
download.file("https://www.ssa.gov/oact/babynames/names.zip",
destfile = "names.zip")
unzip("names.zip")
# Load and combine all .csv files that you just unzipped
file_list <- list.files(pattern = "yob[0-9][0-9][0-9][0-9]\\.txt$")
dataset <-
lapply(file_list, function(x) {
dat <- read_csv(x, col_names = FALSE, col_types = cols(X2 = col_character()))
dat$year <- str_extract(x, "[0-9][0-9][0-9][0-9]")
return(dat)
})
dataset <- dataset %>%
do.call("rbind", .) %>%
tbl_df()
# See? I told you I'd change it back
setwd(old_wd)
dataset
head(dataset)
names(dataset) <- c("name", "gender", "count", "year")
table(dataset$gender)
gender_balance <- dataset %>%
group_by(year, gender) %>%
summarise(count = sum(count)) %>%
ungroup() %>%
group_by(year) %>%
mutate(percent = count / sum(count))
ggplot(gender_balance, aes(x = year, y = percent)) +
geom_point(aes(color = gender) +
scale_x_discrete(breaks = seq(from = 1890, to = 2010, by = 10)) +
scale_y_continuous(labels=percent) +
theme_bw() +
scale_color_manual(values=c("red", "blue"))
ggplot(gender_balance, aes(x = year, y = percent)) +
ggplot(gender_balance, aes(x = year, y = percent)) +
geom_point() +
scale_x_discrete(breaks = seq(from = 1890, to = 2010, by = 10)) +
scale_y_continuous(labels=percent) +
theme_bw() +
scale_color_manual(values=c("red", "blue"))
ggplot(gender_balance, aes(x = year, y = percent)) +
geom_point(aes(color = gender)) +
scale_x_discrete(breaks = seq(from = 1890, to = 2010, by = 10)) +
scale_y_continuous(labels=percent) +
theme_bw() +
scale_color_manual(values=c("red", "blue"))
ggplot(gender_balance, aes(x = year, y = percent)) +
geom_point(aes(color = gender)) +
scale_x_discrete(breaks = seq(from = 1890, to = 2010, by = 10)) +
scale_y_continuous(labels=percent) +
theme_bw() +
scale_color_manual(values=c("red", "blue")) +
titles(main = "HELLO")
ggplot(gender_balance, aes(x = year, y = percent)) +
geom_point(aes(color = gender)) +
scale_x_discrete(breaks = seq(from = 1890, to = 2010, by = 10)) +
scale_y_continuous(labels=percent) +
theme_bw() +
scale_color_manual(values=c("red", "blue")) +
ggtitle(main = "HELLO")
?ggtitle
ggplot(gender_balance, aes(x = year, y = percent)) +
geom_point(aes(color = gender)) +
scale_x_discrete(breaks = seq(from = 1890, to = 2010, by = 10)) +
scale_y_continuous(labels=percent) +
theme_bw() +
scale_color_manual(values=c("red", "blue")) +
ggtitle("HELLO")
ggplot(gender_balance, aes(x = year, y = percent)) +
geom_point(aes(color = gender)) +
scale_x_discrete(breaks = seq(from = 1890, to = 2010, by = 10)) +
scale_y_continuous(labels=percent) +
theme_bw() +
scale_color_manual(values=c("red", "blue")) +
ggtitle("Names by gender by year")
dat %>%
partition(dat)
wait_return <- function(x) {
Sys.sleep(5)
x
}
library(multidplyr)
dat <- rnorm(5)
dat %>%
partition(dat)
dat %>%
partition(dat)
dat <- tible(name = 1:5, data = rnorm(5))
library(tidyverse)
dat <- tibble(name = 1:5, data = rnorm(5))
dat
dat %>%
partition(name)
?partition
?microbenchmark
install.packages("microbenchmark")
library(microbenchmark)
?microbenchmark
microbenchmark(wait_return(1:2), times = 2)
microbenchmark(sum(dat))
microbenchmark(sum(dat), mean(da))
microbenchmark(sum(dat), mean(dat))
warnings()
microbenchmark(sum(dat$data), mean(dat$data))
wait_return <- function(x) {
Sys.sleep(5)
x
}
library(tidyverse)
library(multidplyr)
dat <- tibble(name = 1:5, data = rnorm(5))
multi_wait_return <- function(x) {
x %>%
partition(name) %>%
mutate(.$data = wait_return(.$data))
return(x)
}
multi_wait_return <- function(x) {
x %>%
partition(name) %>%
mutate(.$data = wait_return(.$data))
return(x)
}
multi_wait_return <- function(x) {
x %>%
partition(name) %>%
mutate(.$data = wait_return(.$data))
return(x)
}
multi_wait_return <- function(x) {
x %>%
partition(name) %>%
mutate(pointless = wait_return(data))
return(x)
}
multi_wait_return(dat)
wait_return <- function(x) {
Sys.sleep(5)
x
}
multi_wait_return(dat)
wait_return <- function(x) {
Sys.sleep(5)
x
}
library(tidyverse)
library(multidplyr)
dat <- tibble(name = 1:5, data = rnorm(5))
multi_wait_return <- function(x) {
x %>%
partition(name) %>%
mutate(pointless =
function(y) {Sys.sleep(5)
return(y)})
return(x)
}
multi_wait_return(dat)
dat <- tibble(name = 1:1000000, data = rnorm(1000000))
microbenchmark(sum(dat$data), mean(dat$data))
microbenchmark(sum(dat$data), median(dat$data), mean(dat$data))
summary(dat$data)
res <- microbenchmark(sum(dat$data), mean(dat$data), summary(dat$data))
res
quantile(dat$data, probs = .25)
summary(dat$data)
my_summary <- function(x) {
tibble(Min = min(x), `1st Qu.` = quantile(x, probs = .25))
}
summary(dat$data)
summary(dat$data)
library(tidyverse)
library(multidplyr)
dat <- tibble(name = 1:1000000, data = rnorm(1000000))
my_summary <- function(x) {
tibble(
Min = min(x),
`1st Qu.` = quantile(x, probs = .25),
Median = median(x),
`3rd Qu.` = quantile(x, probs = .75),
Max = max(x)
)
}
res <-
microbenchmark(sum(dat$data), mean(dat$data), summary(dat$data))
my_summary(dat$data)
res <-
microbenchmark(my_summary(dat$data), summary(dat$data))
res
res <-
microbenchmark(my_summary(dat$data), summary(dat$data), times = 1000)
res
boxplot(res)
summarry
summary
dataset
